Startup:
    LDDA WelcomeMessage    
    CALL PrintString      
    HALT

PrintString:
    ; L'adresse de la chaîne est reçue dans le registre 16 bits DA
    ; DA contient l'adresse de la chaîne de caractères
    
    ; Sauvegarder DA pour pouvoir l'utiliser comme pointeur
    PUSH DA
    
PrintString_Loop:
    ; Charger le caractère actuel depuis DA
    LDA (DA)              ; Charger le caractère pointé par DA dans A
    
    ; Vérifier si c'est le caractère de fin (0x00)
    CMP A, 0
    JZ PrintString_End    ; Si zéro, terminer
    
    ; Afficher le caractère via syscall
    LDB A                 ; Mettre le caractère dans B pour syscall
    LDA 1                 ; Code syscall 1 = PRINT_CHAR
    SYS                   ; Appel système
    
    ; Passer au caractère suivant
    INC16 DA              ; Incrémenter l'adresse
    JMP PrintString_Loop  ; Continuer la boucle
    
PrintString_End:
    ; Restaurer DA
    POP DA
    RET                   ; Retour de la fonction

PrintChar:
    ; Fonction PrintChar pour afficher un caractère à une position donnée
    ; Entrée: A = code ASCII du caractère
    ;         B = position X (colonne)
    ;         C = position Y (ligne)
    ;         D = couleur de premier plan
    ;         E = couleur de fond
    
    ; Sauvegarder tous les registres
    PUSH A
    PUSH B
    PUSH C
    PUSH D
    PUSH E
    PUSH DA
    
    ; Calculer l'adresse de la matrice du caractère dans AmstradCPCFont
    ; Chaque caractère = 8 octets, donc adresse = AmstradCPCFont + (A * 8)
    
    ; Multiplier A par 8 (décaler 3 bits à gauche)
    SHL A                 ; A = A * 2
    SHL A                 ; A = A * 4
    SHL A                 ; A = A * 8
    
    ; Calculer l'adresse absolue: AmstradCPCFont + offset
    LDDA AmstradCPCFont   ; Charger l'adresse de base de la police
    ADD16 DA, A           ; Ajouter l'offset du caractère (DA = DA + A étendu)
    
    ; Maintenant DA pointe vers les données du caractère (8 octets)
    
    ; Calculer la position pixel de départ
    ; X pixel = B * 8, Y pixel = C * 8
    
    ; Traitement de X
    LDF B                 ; Copier B dans F
    SHL F                 ; F = B * 2
    SHL F                 ; F = B * 4  
    SHL F                 ; F = B * 8 (position X en pixels)
    
    ; Traitement de Y  
    SHL C                 ; C = C * 2
    SHL C                 ; C = C * 4
    SHL C                 ; C = C * 8 (position Y en pixels)
    
    ; Boucle pour dessiner les 8 lignes du caractère
    LDA 8                 ; Compteur de lignes
    
PrintChar_LineLoop:
    PUSH A                ; Sauvegarder le compteur de lignes
    
    ; Charger les données de la ligne actuelle
    LDB (DA)              ; Charger la ligne de pixels depuis DA
    
    ; Dessiner les 8 pixels de cette ligne
    LDE 8                 ; Compteur de pixels
    
PrintChar_PixelLoop:
    ; Tester le bit le plus significatif de B
    LDA B
    AND A, 0x80           ; Masquer le bit 7
    JZ PrintChar_BackgroundPixel
    
    ; Dessiner pixel de premier plan
    POP E                 ; Récupérer couleur de premier plan
    PUSH E
    JMP PrintChar_DrawPixel
    
PrintChar_BackgroundPixel:
    ; Dessiner pixel de fond
    POP D                 ; Récupérer couleur de fond  
    PUSH D
    MOV E, D              ; Utiliser couleur de fond
    
PrintChar_DrawPixel:
    ; Appel système pour dessiner le pixel
    ; SYSCALL 0x20: SetPixel - BC = X, D = Y, A après syscall = couleur
    
    ; Préparer les paramètres pour syscall SetPixel
    ; X est dans F (position X de base + offset pixel)
    ; Y est dans C (position Y de base + ligne actuelle)
    
    LDA 0x20              ; Code syscall SetPixel
    LDB 0                 ; High byte de X = 0
    MOV C, F              ; Low byte de X = position courante
    ; D contient déjà Y
    ; A sera écrasé par le code syscall, on met la couleur après
    PUSH E                ; Sauvegarder couleur
    SYS                   ; Appel système
    POP A                 ; Récupérer couleur dans A
    
    ; Passer au pixel suivant
    INC F                 ; Incrémenter position X
    SHL B                 ; Décaler les données de la ligne
    DEC E                 ; Décrémenter compteur de pixels
    JNZ PrintChar_PixelLoop
    
    ; Passer à la ligne suivante
    INC DA                ; Pointer vers la ligne suivante de la police
    INC C                 ; Incrémenter position Y
    POP F                 ; Restaurer position X de départ
    
    POP A                 ; Récupérer compteur de lignes
    DEC A                 ; Décrémenter compteur
    JNZ PrintChar_LineLoop
    
    ; Restaurer tous les registres
    POP DA
    POP E
    POP D
    POP C
    POP B
    POP A
    
    RET

WelcomeMessage:
    DB "FS System v1.0", 0x00
ScreenSize:
    DB 0x40, 0x01, 0xC8, 0x00 ; Width: 320 pixels (0x4001 little endien), Height: 200 pixels (0xC8 little endien)
CharSize:
    DB 0x08, 0x08 ; Width: 8 pixels, Height: 8 pixels
AmstradCPCFont:
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x00 - NULL
    DB 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E    ; 0x01 - SOH
    DB 0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E    ; 0x02 - STX
    DB 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00    ; 0x03 - ETX (coeur)
    DB 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00    ; 0x04 - EOT (diamant)
    DB 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C    ; 0x05 - ENQ (trèfle)
    DB 0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C    ; 0x06 - ACK (pique)
    DB 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00    ; 0x07 - BEL (point)
    DB 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF    ; 0x08 - BS
    DB 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00    ; 0x09 - TAB
    DB 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF    ; 0x0A - LF
    DB 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78    ; 0x0B - VT
    DB 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18    ; 0x0C - FF
    DB 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0    ; 0x0D - CR
    DB 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0    ; 0x0E - SO
    DB 0x18, 0xDB, 0x3C, 0xE7, 0xE7, 0x3C, 0xDB, 0x18    ; 0x0F - SI
    DB 0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00    ; 0x10 - DLE (triangle droite)
    DB 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00    ; 0x11 - DC1 (triangle gauche)
    DB 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18    ; 0x12 - DC2 (flèche haut/bas)
    DB 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00    ; 0x13 - DC3
    DB 0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00    ; 0x14 - DC4
    DB 0x3E, 0x61, 0x3C, 0x66, 0x66, 0x3C, 0x86, 0x7C    ; 0x15 - NAK
    DB 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00    ; 0x16 - SYN
    DB 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF    ; 0x17 - ETB
    DB 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00    ; 0x18 - CAN (flèche haut)
    DB 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00    ; 0x19 - EM (flèche bas)
    DB 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00    ; 0x1A - SUB (flèche droite)
    DB 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00    ; 0x1B - ESC (flèche gauche)
    DB 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00    ; 0x1C - FS
    DB 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00    ; 0x1D - GS
    DB 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00    ; 0x1E - RS
    DB 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00    ; 0x1F - US
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x20 - SPACE
    DB 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00    ; 0x21 - !
    DB 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x22 - "
    DB 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00    ; 0x23 - #
    DB 0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00    ; 0x24 - $
    DB 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00    ; 0x25 - %
    DB 0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00    ; 0x26 - &
    DB 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x27 - '
    DB 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00    ; 0x28 - (
    DB 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00    ; 0x29 - )
    DB 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00    ; 0x2A - *
    DB 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00    ; 0x2B - +
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60    ; 0x2C - ,
    DB 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00    ; 0x2D - -
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00    ; 0x2E - .
    DB 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00    ; 0x2F - /
    DB 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00    ; 0x30 - 0
    DB 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00    ; 0x31 - 1
    DB 0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00    ; 0x32 - 2
    DB 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00    ; 0x33 - 3
    DB 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00    ; 0x34 - 4
    DB 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00    ; 0x35 - 5
    DB 0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00    ; 0x36 - 6
    DB 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00    ; 0x37 - 7
    DB 0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00    ; 0x38 - 8
    DB 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00    ; 0x39 - 9
    DB 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00    ; 0x3A - :
    DB 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60    ; 0x3B - ;
    DB 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00    ; 0x3C - <
    DB 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00    ; 0x3D - =
    DB 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00    ; 0x3E - >
    DB 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00    ; 0x3F - ?
    DB 0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00    ; 0x40 - @
    DB 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00    ; 0x41 - A
    DB 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00    ; 0x42 - B
    DB 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00    ; 0x43 - C
    DB 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00    ; 0x44 - D
    DB 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00    ; 0x45 - E
    DB 0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00    ; 0x46 - F
    DB 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00    ; 0x47 - G
    DB 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00    ; 0x48 - H
    DB 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x49 - I
    DB 0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00    ; 0x4A - J
    DB 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00    ; 0x4B - K
    DB 0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00    ; 0x4C - L
    DB 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00    ; 0x4D - M
    DB 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00    ; 0x4E - N
    DB 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00    ; 0x4F - O
    DB 0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00    ; 0x50 - P
    DB 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00    ; 0x51 - Q
    DB 0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00    ; 0x52 - R
    DB 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00    ; 0x53 - S
    DB 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x54 - T
    DB 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00    ; 0x55 - U
    DB 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00    ; 0x56 - V
    DB 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00    ; 0x57 - W
    DB 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00    ; 0x58 - X
    DB 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00    ; 0x59 - Y
    DB 0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00    ; 0x5A - Z
    DB 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00    ; 0x5B - [
    DB 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00    ; 0x5C - \
    DB 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00    ; 0x5D - ]
    DB 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00    ; 0x5E - ^
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF    ; 0x5F - _
    DB 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x60 - `
    DB 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00    ; 0x61 - a
    DB 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00    ; 0x62 - b
    DB 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00    ; 0x63 - c
    DB 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00    ; 0x64 - d
    DB 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00    ; 0x65 - e
    DB 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00    ; 0x66 - f
    DB 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8    ; 0x67 - g
    DB 0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00    ; 0x68 - h
    DB 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x69 - i
    DB 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78    ; 0x6A - j
    DB 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00    ; 0x6B - k
    DB 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x6C - l
    DB 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00    ; 0x6D - m
    DB 0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00    ; 0x6E - n
    DB 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00    ; 0x6F - o
    DB 0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0    ; 0x70 - p
    DB 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E    ; 0x71 - q
    DB 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00    ; 0x72 - r
    DB 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00    ; 0x73 - s
    DB 0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00    ; 0x74 - t
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00    ; 0x75 - u
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00    ; 0x76 - v
    DB 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00    ; 0x77 - w
    DB 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00    ; 0x78 - x
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8    ; 0x79 - y
    DB 0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00    ; 0x7A - z
    DB 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00    ; 0x7B - {
    DB 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00    ; 0x7C - |
    DB 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00    ; 0x7D - }
    DB 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x7E - ~
    DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF    ; 0x7F - DEL (carré)

