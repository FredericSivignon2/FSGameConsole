Startup:
    LDIX1 WelcomeMessage    
    CALL PrintString      
    HALT

PrintString:
    ; The string address is received in the 16-bit register IDX1
    ; IDX1 contains the address of the character string

    ; Save IDX1 to be able to use it as a pointer
    ;PUSH16 IDX1
    PUSH C
    LDC #0                  ; Load 0 into C for comparison

PrintString_Loop:
    ; Load the current character from IDX1
    LDA (IDX1)              ; Load character pointed by IDX1 into A

    ; Check if it's the end character (0x00)
    CMP A, B
    JZ PrintString_End    ; If zero, terminate
    
    CALL PrintChar         ; Call PrintChar to print the character
    
    ; Move to next character
    INC16 IDX1            ; Increment address
    JMP PrintString_Loop  ; Continue loop
    
PrintString_End:
    ; Restore IDX1
    POP16 IDX1
    RET                   ; Return from function

PrintChar:
    ; PrintChar function to display a character at a given position
    ; Input: A = ASCII code of character
    ;        B = X position (column)
    ;        C = Y position (line)
    ;        D = foreground color
    ;        E = background color
    
    ; Save all registers
    PUSH A
    PUSH B
    PUSH C
    PUSH D
    PUSH E
    PUSH16 DA
    PUSH16 DB
    
    ; Calculate address of character matrix in AmstradCPCFont
    ; Each character = 8 bytes, so address = AmstradCPCFont + (A * 8)
    
    ; Clear DB and extend A to 16-bit safely
    LDDB 0                ; Clear DB (DB = 0x0000)
    
    ; Use repeated addition to calculate A * 8 in DB
    ; This avoids overflow since we work with 16-bit register
    LDF 8                 ; Counter for 8 additions
    
PrintChar_Multiply:
    ; Convert A to 16-bit and add to DB
    ; Since ADD16 extends 8-bit operands, this is safe
    ADD16 DB, A           ; DB = DB + A (A is extended to 16-bit)
    DEC F                 ; Decrement counter
    JNZ PrintChar_Multiply ; Continue until F = 0
    
    ; Now DB contains A * 8 without overflow
    ; Calculate absolute address: AmstradCPCFont + offset
    LDDA AmstradCPCFont   ; Load base address of font
    ADD16 DA, DB          ; Add character offset (DA = DA + DB)
    
    ; Now DA points to character data (8 bytes)
    
    ; Calculate starting pixel position
    ; X pixel = B * 8, Y pixel = C * 8
    
    ; Process X - multiply B by 8 using shifts
    LDF B                 ; Copy B to F
    SHL F                 ; F = B * 2
    SHL F                 ; F = B * 4  
    SHL F                 ; F = B * 8 (X position in pixels)
    
    ; Process Y - multiply C by 8 using shifts
    SHL C                 ; C = C * 2
    SHL C                 ; C = C * 4
    SHL C                 ; C = C * 8 (Y position in pixels)
    
    ; Loop to draw the 8 lines of the character
    LDA 8                 ; Line counter
    
PrintChar_LineLoop:
    PUSH A                ; Save line counter
    
    ; Load current line data
    LDB (DA)              ; Load pixel line from DA
    
    ; Draw the 8 pixels of this line
    LDE 8                 ; Pixel counter
    
PrintChar_PixelLoop:
    ; Test the most significant bit of B
    LDA B
    AND A, 0x80           ; Mask bit 7
    JZ PrintChar_BackgroundPixel
    
    ; Draw foreground pixel - get foreground color
    ; We need to access the saved foreground color (D)
    ; Since we've pushed many things, we need to peek at the right position
    ; For now, let's use a simpler approach
    LDA 15                ; Use white as foreground for now
    JMP PrintChar_DrawPixel
    
PrintChar_BackgroundPixel:
    ; Draw background pixel  
    LDA 0                 ; Use black as background for now
    
PrintChar_DrawPixel:
    ; System call to draw pixel
    ; SYSCALL 0x20: SetPixel - BC = X, D = Y, A after syscall = color
    
    ; Prepare parameters for SetPixel syscall
    ; X is in F (base X position + pixel offset)
    ; Y is in C (base Y position + current line)
    
    PUSH A                ; Save color
    LDA 0x20              ; SetPixel syscall code
    LDB 0                 ; High byte of X = 0
    MOV C, F              ; Low byte of X = current position
    MOV D, C              ; Y position
    SYS                   ; System call
    POP A                 ; Get color back for next syscall parameter
    
    ; Move to next pixel
    INC F                 ; Increment X position
    SHL B                 ; Shift line data
    DEC E                 ; Decrement pixel counter
    JNZ PrintChar_PixelLoop
    
    ; Move to next line
    INC16 DA              ; Point to next font line
    INC C                 ; Increment Y position
    ; Restore starting X position for next line
    POP B                 ; Get original B
    PUSH B                ; Save it again
    LDF B                 ; Copy B to F
    SHL F                 ; F = B * 2
    SHL F                 ; F = B * 4  
    SHL F                 ; F = B * 8 (X position in pixels)
    
    POP A                 ; Get line counter back
    DEC A                 ; Decrement counter
    JNZ PrintChar_LineLoop
    
    ; Restore all registers
    POP16 DB
    POP16 DA
    POP E
    POP D
    POP C
    POP B
    POP A
    
    RET

WelcomeMessage:
    DB "FS System v1.0"
ScreenSize:
    DB 0x40, 0x01, 0xC8, 0x00 ; Width: 320 pixels (0x4001 little endian), Height: 200 pixels (0xC8 little endian)
CharSize:
    DB 0x08, 0x08 ; Width: 8 pixels, Height: 8 pixels
AmstradCPCFont:
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x00 - NULL
    DB 0x7E, 0x81, 0xA5, 0x81, 0xBD, 0x99, 0x81, 0x7E    ; 0x01 - SOH
    DB 0x7E, 0xFF, 0xDB, 0xFF, 0xC3, 0xE7, 0xFF, 0x7E    ; 0x02 - STX
    DB 0x6C, 0xFE, 0xFE, 0xFE, 0x7C, 0x38, 0x10, 0x00    ; 0x03 - ETX (heart)
    DB 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x10, 0x00    ; 0x04 - EOT (diamond)
    DB 0x38, 0x7C, 0x38, 0xFE, 0xFE, 0x7C, 0x38, 0x7C    ; 0x05 - ENQ (club)
    DB 0x10, 0x10, 0x38, 0x7C, 0xFE, 0x7C, 0x38, 0x7C    ; 0x06 - ACK (spade)
    DB 0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00    ; 0x07 - BEL (dot)
    DB 0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF    ; 0x08 - BS
    DB 0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00    ; 0x09 - TAB
    DB 0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF    ; 0x0A - LF
    DB 0x0F, 0x07, 0x0F, 0x7D, 0xCC, 0xCC, 0xCC, 0x78    ; 0x0B - VT
    DB 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x18, 0x7E, 0x18    ; 0x0C - FF
    DB 0x3F, 0x33, 0x3F, 0x30, 0x30, 0x70, 0xF0, 0xE0    ; 0x0D - CR
    DB 0x7F, 0x63, 0x7F, 0x63, 0x63, 0x67, 0xE6, 0xC0    ; 0x0E - SO
    DB 0x18, 0xDB, 0x3C, 0xE7, 0xE7, 0x3C, 0xDB, 0x18    ; 0x0F - SI
    DB 0x80, 0xE0, 0xF8, 0xFE, 0xF8, 0xE0, 0x80, 0x00    ; 0x10 - DLE (right triangle)
    DB 0x02, 0x0E, 0x3E, 0xFE, 0x3E, 0x0E, 0x02, 0x00    ; 0x11 - DC1 (left triangle)
    DB 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x7E, 0x3C, 0x18    ; 0x12 - DC2 (up/down arrow)
    DB 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00    ; 0x13 - DC3
    DB 0x7F, 0xDB, 0xDB, 0x7B, 0x1B, 0x1B, 0x1B, 0x00    ; 0x14 - DC4
    DB 0x3E, 0x61, 0x3C, 0x66, 0x66, 0x3C, 0x86, 0x7C    ; 0x15 - NAK
    DB 0x00, 0x00, 0x00, 0x00, 0x7E, 0x7E, 0x7E, 0x00    ; 0x16 - SYN
    DB 0x18, 0x3C, 0x7E, 0x18, 0x7E, 0x3C, 0x18, 0xFF    ; 0x17 - ETB
    DB 0x18, 0x3C, 0x7E, 0x18, 0x18, 0x18, 0x18, 0x00    ; 0x18 - CAN (up arrow)
    DB 0x18, 0x18, 0x18, 0x18, 0x7E, 0x3C, 0x18, 0x00    ; 0x19 - EM (down arrow)
    DB 0x00, 0x18, 0x0C, 0xFE, 0x0C, 0x18, 0x00, 0x00    ; 0x1A - SUB (right arrow)
    DB 0x00, 0x30, 0x60, 0xFE, 0x60, 0x30, 0x00, 0x00    ; 0x1B - ESC (left arrow)
    DB 0x00, 0x00, 0xC0, 0xC0, 0xC0, 0xFE, 0x00, 0x00    ; 0x1C - FS
    DB 0x00, 0x24, 0x66, 0xFF, 0x66, 0x24, 0x00, 0x00    ; 0x1D - GS
    DB 0x00, 0x18, 0x3C, 0x7E, 0xFF, 0xFF, 0x00, 0x00    ; 0x1E - RS
    DB 0x00, 0xFF, 0xFF, 0x7E, 0x3C, 0x18, 0x00, 0x00    ; 0x1F - US
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x20 - SPACE
    DB 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00    ; 0x21 - !
    DB 0x6C, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x22 - "
    DB 0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00    ; 0x23 - #
    DB 0x30, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x30, 0x00    ; 0x24 - $
    DB 0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00    ; 0x25 - %
    DB 0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00    ; 0x26 - &
    DB 0x60, 0x60, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x27 - '
    DB 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00    ; 0x28 - (
    DB 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00    ; 0x29 - )
    DB 0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00    ; 0x2A - *
    DB 0x00, 0x30, 0x30, 0xFC, 0x30, 0x30, 0x00, 0x00    ; 0x2B - +
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60    ; 0x2C - ,
    DB 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00    ; 0x2D - -
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00    ; 0x2E - .
    DB 0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00    ; 0x2F - /
    DB 0x7C, 0xC6, 0xCE, 0xDE, 0xF6, 0xE6, 0x7C, 0x00    ; 0x30 - 0
    DB 0x30, 0x70, 0x30, 0x30, 0x30, 0x30, 0xFC, 0x00    ; 0x31 - 1
    DB 0x78, 0xCC, 0x0C, 0x38, 0x60, 0xCC, 0xFC, 0x00    ; 0x32 - 2
    DB 0x78, 0xCC, 0x0C, 0x38, 0x0C, 0xCC, 0x78, 0x00    ; 0x33 - 3
    DB 0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00    ; 0x34 - 4
    DB 0xFC, 0xC0, 0xF8, 0x0C, 0x0C, 0xCC, 0x78, 0x00    ; 0x35 - 5
    DB 0x38, 0x60, 0xC0, 0xF8, 0xCC, 0xCC, 0x78, 0x00    ; 0x36 - 6
    DB 0xFC, 0xCC, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00    ; 0x37 - 7
    DB 0x78, 0xCC, 0xCC, 0x78, 0xCC, 0xCC, 0x78, 0x00    ; 0x38 - 8
    DB 0x78, 0xCC, 0xCC, 0x7C, 0x0C, 0x18, 0x70, 0x00    ; 0x39 - 9
    DB 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00    ; 0x3A - :
    DB 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60    ; 0x3B - ;
    DB 0x18, 0x30, 0x60, 0xC0, 0x60, 0x30, 0x18, 0x00    ; 0x3C - <
    DB 0x00, 0x00, 0xFC, 0x00, 0x00, 0xFC, 0x00, 0x00    ; 0x3D - =
    DB 0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00    ; 0x3E - >
    DB 0x78, 0xCC, 0x0C, 0x18, 0x30, 0x00, 0x30, 0x00    ; 0x3F - ?
    DB 0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00    ; 0x40 - @
    DB 0x30, 0x78, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0x00    ; 0x41 - A
    DB 0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00    ; 0x42 - B
    DB 0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00    ; 0x43 - C
    DB 0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00    ; 0x44 - D
    DB 0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00    ; 0x45 - E
    DB 0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00    ; 0x46 - F
    DB 0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3E, 0x00    ; 0x47 - G
    DB 0xCC, 0xCC, 0xCC, 0xFC, 0xCC, 0xCC, 0xCC, 0x00    ; 0x48 - H
    DB 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x49 - I
    DB 0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00    ; 0x4A - J
    DB 0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00    ; 0x4B - K
    DB 0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00    ; 0x4C - L
    DB 0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00    ; 0x4D - M
    DB 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00    ; 0x4E - N
    DB 0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00    ; 0x4F - O
    DB 0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00    ; 0x50 - P
    DB 0x78, 0xCC, 0xCC, 0xCC, 0xDC, 0x78, 0x1C, 0x00    ; 0x51 - Q
    DB 0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00    ; 0x52 - R
    DB 0x78, 0xCC, 0xE0, 0x70, 0x1C, 0xCC, 0x78, 0x00    ; 0x53 - S
    DB 0xFC, 0xB4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x54 - T
    DB 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xFC, 0x00    ; 0x55 - U
    DB 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00    ; 0x56 - V
    DB 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00    ; 0x57 - W
    DB 0xC6, 0xC6, 0x6C, 0x38, 0x38, 0x6C, 0xC6, 0x00    ; 0x58 - X
    DB 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x30, 0x78, 0x00    ; 0x59 - Y
    DB 0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00    ; 0x5A - Z
    DB 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00    ; 0x5B - [
    DB 0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00    ; 0x5C - \
    DB 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00    ; 0x5D - ]
    DB 0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00    ; 0x5E - ^
    DB 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF    ; 0x5F - _
    DB 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x60 - `
    DB 0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00    ; 0x61 - a
    DB 0xE0, 0x60, 0x60, 0x7C, 0x66, 0x66, 0xDC, 0x00    ; 0x62 - b
    DB 0x00, 0x00, 0x78, 0xCC, 0xC0, 0xCC, 0x78, 0x00    ; 0x63 - c
    DB 0x1C, 0x0C, 0x0C, 0x7C, 0xCC, 0xCC, 0x76, 0x00    ; 0x64 - d
    DB 0x00, 0x00, 0x78, 0xCC, 0xFC, 0xC0, 0x78, 0x00    ; 0x65 - e
    DB 0x38, 0x6C, 0x60, 0xF0, 0x60, 0x60, 0xF0, 0x00    ; 0x66 - f
    DB 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8    ; 0x67 - g
    DB 0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00    ; 0x68 - h
    DB 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x69 - i
    DB 0x0C, 0x00, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78    ; 0x6A - j
    DB 0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00    ; 0x6B - k
    DB 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00    ; 0x6C - l
    DB 0x00, 0x00, 0xCC, 0xFE, 0xFE, 0xD6, 0xC6, 0x00    ; 0x6D - m
    DB 0x00, 0x00, 0xF8, 0xCC, 0xCC, 0xCC, 0xCC, 0x00    ; 0x6E - n
    DB 0x00, 0x00, 0x78, 0xCC, 0xCC, 0xCC, 0x78, 0x00    ; 0x6F - o
    DB 0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0    ; 0x70 - p
    DB 0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E    ; 0x71 - q
    DB 0x00, 0x00, 0xDC, 0x76, 0x66, 0x60, 0xF0, 0x00    ; 0x72 - r
    DB 0x00, 0x00, 0x7C, 0xC0, 0x78, 0x0C, 0xF8, 0x00    ; 0x73 - s
    DB 0x10, 0x30, 0x7C, 0x30, 0x30, 0x34, 0x18, 0x00    ; 0x74 - t
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00    ; 0x75 - u
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x78, 0x30, 0x00    ; 0x76 - v
    DB 0x00, 0x00, 0xC6, 0xD6, 0xFE, 0xFE, 0x6C, 0x00    ; 0x77 - w
    DB 0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00    ; 0x78 - x
    DB 0x00, 0x00, 0xCC, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8    ; 0x79 - y
    DB 0x00, 0x00, 0xFC, 0x98, 0x30, 0x64, 0xFC, 0x00    ; 0x7A - z
    DB 0x1C, 0x30, 0x30, 0xE0, 0x30, 0x30, 0x1C, 0x00    ; 0x7B - {
    DB 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00    ; 0x7C - |
    DB 0xE0, 0x30, 0x30, 0x1C, 0x30, 0x30, 0xE0, 0x00    ; 0x7D - }
    DB 0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00    ; 0x7E - ~
    DB 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF    ; 0x7F - DEL (square)

